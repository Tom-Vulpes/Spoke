import time
import board
import touchio
import usb_midi
import adafruit_midi
from adafruit_midi.note_on import NoteOn
from adafruit_midi.note_off import NoteOff
import neopixel

# Configuration
BPM = 120  # Beats per minute
STEPS = 16  # Default number of steps in the sequence
MIDI_NOTE = 60  # MIDI note to play

# Calculate step delay based on BPM
step_delay = 60 / BPM

# Define touch pins
TOUCH_PINS = [
    board.GP1, board.GP2, board.GP3, board.GP4, board.GP5, board.GP6, board.GP7, board.GP8,
    board.GP9, board.GP10, board.GP11, board.GP12, board.GP13, board.GP14, board.GP15, board.GP16,
    board.GP17, board.GP18, board.GP19, board.GP20, board.GP21, board.GP22, board.GP23, board.GP24,
    board.GP25, board.GP28, board.VOLTAGE_MONITOR
]

# Ensure the number of steps does not exceed available pins
STEPS = min(STEPS, len(TOUCH_PINS))
TOUCH_PINS = TOUCH_PINS[:STEPS]

# Initialize touch sensors
touch_sensors = [touchio.TouchIn(pin) for pin in TOUCH_PINS]

# Initialize NeoPixels
pixels = neopixel.NeoPixel(board.GP0, STEPS, brightness=0.1, auto_write=False)
pixels.fill((0, 0, 0))
pixels.show()

# MIDI setup
midi = adafruit_midi.MIDI(midi_out=usb_midi.ports[1], out_channel=0)

# Step sequencer state
sequence = [False] * STEPS  # False = no note, True = play note
current_step = 0

while True:
    # Check for touch input
    for i, sensor in enumerate(touch_sensors):
        if sensor.value:
            sequence[i] = not sequence[i]  # Toggle step
            pixels[i] = (0, 255, 0) if sequence[i] else (0, 0, 0)  # Toggle Green for active, off for inactive
            pixels.show()
            time.sleep(0.2)  # Debounce delay

    # Clear previous step highlight
    pixels.fill((0, 0, 0))
    
    # Restore active steps as green
    for i in range(len(sequence)):
        if sequence[i]:
            pixels[i] = (0, 255, 0)
    
    # Ensure current step is within bounds
    if len(sequence) > 0:
        current_step %= len(sequence)
        pixels[current_step] = (0, 0, 255)
    
        if sequence[current_step]:
            midi.send(NoteOn(MIDI_NOTE, 120))
            time.sleep(0.1)  # Note length
            midi.send(NoteOff(MIDI_NOTE, 120))
    
    pixels.show()
    time.sleep(step_delay)  # Wait for next step
    
    if len(sequence) > 0:
        current_step = (current_step + 1) % len(sequence)  # Advance step safely

