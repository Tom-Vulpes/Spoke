import time
import board
import touchio
import usb_hid
import digitalio

from adafruit_hid.keyboard import Keyboard
from adafruit_hid.keycode import Keycode

kpd = Keyboard(usb_hid.devices)

# Setup LED toggling
led = digitalio.DigitalInOut(board.LED)
led.direction = digitalio.Direction.OUTPUT

# Define the touch pins
touch_pins = [board.GP0, board.GP1, board.GP2, board.GP3, board.GP4, board.GP5, board.GP6, board.GP7, board.GP8, board.GP9, board.GP10, board.GP11, board.GP12, board.GP13, board.GP14, board.GP15, board.GP16, board.GP17, board.GP18, board.GP19, board.GP20, board.GP21, board.GP22, board.GP26, board.GP27, board.GP28]

# Initialize touch sensors
touch_sensors = []
for pin in touch_pins:
    try:
        touch_sensors.append(touchio.TouchIn(pin))
    except ValueError:
        print(f"No pulldown resistor found on pin {pin}, skipping...")

# Keymap configuration
KEYMAP = (
    ("A", [Keycode.A]), #gp00
    ("B", [Keycode.B]), #gp01
    ("C", [Keycode.C]), #gp02
    ("D", [Keycode.D]), #gp03
    ("E", [Keycode.E]), #gp04
    ("F", [Keycode.F]), #gp05
    ("G", [Keycode.G]), #gp06
    ("H", [Keycode.H]), #gp07
    ("I", [Keycode.I]), #gp08
    ("J", [Keycode.J]), #gp09
    ("K", [Keycode.K]), #gp10
    ("L", [Keycode.L]), #gp11
    ("M", [Keycode.M]), #gp12
    ("N", [Keycode.N]), #gp13
    ("O", [Keycode.O]), #gp14
    ("P", [Keycode.P]), #gp15
    ("Q", [Keycode.Q]), #gp16
    ("R", [Keycode.R]), #gp17
    ("S", [Keycode.S]), #gp18
    ("T", [Keycode.T]), #gp19
    ("U", [Keycode.U]), #gp20
    ("V", [Keycode.V]), #gp21
    ("W", [Keycode.W]), #gp22
    ("X", [Keycode.X]), #gp26
    ("Y", [Keycode.Y]), #gp27
    ("Z", [Keycode.Z]) #gp28
)

print("\nWelcome to keypad")
print("keymap:")
for key_name, _ in KEYMAP:
    print("\t", key_name)

# Initialize variables to track key state
key_states = [False] * len(touch_pins)

# Main loop
while True:
    # Check each touch sensor
    for i, sensor in enumerate(touch_sensors):
        # If the capacitive touch is activated
        if sensor.value:
            # If the key was not already pressed
            if not key_states[i]:
                print(KEYMAP[i][0])  # Print the key name
                # Send HID keyboard commands corresponding to the key
                for keycode in KEYMAP[i][1]:
                    kpd.press(keycode)
                    led.value = True

                key_states[i] = True  # Update key state
        else:
            # If the key was previously pressed, release it
            if key_states[i]:
                # Release all keys associated with this key
                for keycode in KEYMAP[i][1]:
                    kpd.release(keycode)
                    led.value = False

                key_states[i] = False  # Update key state
    time.sleep(0.1)  # Add a small delay to debounce
