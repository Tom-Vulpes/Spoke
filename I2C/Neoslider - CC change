import time
import board
import touchio
import digitalio
import usb_midi
import neopixel
import random
import busio
from rainbowio import colorwheel
import adafruit_midi
from adafruit_midi.note_on import NoteOn
from adafruit_midi.note_off import NoteOff
from adafruit_seesaw.seesaw import Seesaw
from adafruit_seesaw.analoginput import AnalogInput
from adafruit_seesaw import neopixel as seesaw_neopixel
from adafruit_midi.pitch_bend import PitchBend
from adafruit_midi.control_change import ControlChange



# --- MIDI Setup ---
midi_notes = [98, 96, 93, 91, 88, 86, 84, 81, 79, 76, 74, 72, 69, 67, 64, 62, 60, 57, 55, 52, 50, 48, 45, 43, 40, 38, 36]
midi = adafruit_midi.MIDI(midi_out=usb_midi.ports[1], out_channel=0)

# --- Touch Pins Setup ---
touch_pins = [
    board.GP1, board.GP2, board.GP3, board.GP4, board.GP5, board.GP6, board.GP7, board.GP8,
    board.GP9, board.GP10, board.GP11, board.GP12, board.GP13, board.GP14, board.GP15, board.GP16,
    board.GP17, board.GP18, board.GP19, board.GP20, board.GP21, board.GP22, board.GP23, board.GP24,
    board.GP25, board.GP28, board.VOLTAGE_MONITOR
]
touch_sensors = []
for pin in touch_pins:
    try:
        touch_sensors.append(touchio.TouchIn(pin))
    except ValueError:
        print(f"Skipping pin {pin}")

note_played = [False] * len(touch_sensors)



# --- Onboard NeoPixels (Pico) ---
num_pixels = len(touch_sensors)
pixels = neopixel.NeoPixel(board.GP0, num_pixels, brightness=0.03, auto_write=True)

# --- NeoSlider Setup (I2C) ---
i2c = busio.I2C(scl=board.GP27, sda=board.GP26)
neoslider = Seesaw(i2c, 0x30)
pot = AnalogInput(neoslider, 18)
slider_pixels = seesaw_neopixel.NeoPixel(neoslider, 14, 4, pixel_order=seesaw_neopixel.GRB)
slider_pixels.brightness = 0.4

def pot_to_color(value):
    """Map pot value (0-1023) to a colorwheel position (0-255)."""
    return int(value / 1023 * 255)

def color_int_to_rgb(color_int):
    """Convert 24-bit color to RGB tuple."""
    r = (color_int >> 16) & 0xFF
    g = (color_int >> 8) & 0xFF
    b = color_int & 0xFF
    return (r, g, b)

def invert_color(rgb):
    """Return the inverse RGB color."""
    return tuple(255 - c for c in rgb)


# --- Startup Animation ---
def rainbow(speed, duration):
    start = time.monotonic()
    while time.monotonic() - start < duration:
        for j in range(0, 256, 8):
            for i in range(num_pixels):
                pixels[i] = colorwheel((i * 256 // num_pixels + j) % 256)
            pixels.show()
            time.sleep(speed)

rainbow(0.01, 1.5)
pixels.fill((0, 0, 255))

while True:
    pot_value = pot.value
    cc_value = int(pot_value / 1023 * 127)

    # Send CC message for modulation (CC #1)
    midi.send(ControlChange(1, cc_value))

    # Update base and opposite colors for pixels as before
    color_val = pot_to_color(pot_value)
    base_color_int = colorwheel(color_val)
    base_color = color_int_to_rgb(base_color_int)
    opp_color = invert_color(base_color)

    # Update slider pixels color
    try:
        if neoslider.touch_read(0) < 1000:  # If touched
            slider_pixels.fill(opp_color)
        else:
            slider_pixels.fill(base_color)
    except ValueError:
        slider_pixels.fill(base_color)
    slider_pixels.show()

    # Update onboard pixels to base color
    for i in range(num_pixels):
        pixels[i] = base_color

    # Handle touch sensors sending notes
    for i, touch_sensor in enumerate(touch_sensors):
        if touch_sensor.value:
            if not note_played[i]:
                velocity = int(pot_value / 1023 * 127)
                midi.send(NoteOn(midi_notes[i], velocity))
                note_played[i] = True
                pixels[i] = (255, 0, 255)
        else:
            if note_played[i]:
                midi.send(NoteOff(midi_notes[i], velocity))
                note_played[i] = False
                pixels[i] = base_color  # revert to slider color

    pixels.show()

    time.sleep(0.01)

