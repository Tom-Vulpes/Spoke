# In this code you are able to change the MIDI channel SPOKE sends messages on by pressing the last pin, just to the right of the pico.

import time
import board
import touchio
import usb_midi
import adafruit_midi
from adafruit_midi.note_on import NoteOn
from adafruit_midi.note_off import NoteOff

# Define the touch pins for notes
note_touch_pins = [
    board.GP0, board.GP1, board.GP2, board.GP3, board.GP4, board.GP5, board.GP6,
    board.GP7, board.GP8, board.GP9, board.GP10, board.GP11, board.GP12, board.GP13,
    board.GP14, board.GP15, board.GP16, board.GP17, board.GP18, board.GP19, board.GP20,
    board.GP21, board.GP22, board.GP26, board.GP27
]

# Define the touch pin for changing the MIDI channel
channel_change_pin = board.GP28

# Initialize touch sensors
note_touch_sensors = []
for pin in note_touch_pins:
    try:
        note_touch_sensors.append(touchio.TouchIn(pin))
    except ValueError:
        print(f"No pulldown resistor found on pin {pin}, skipping...")

channel_change_sensor = touchio.TouchIn(channel_change_pin)

# MIDI setup
midi = adafruit_midi.MIDI(midi_out=usb_midi.ports[1], out_channel=0)

# MIDI note numbers corresponding to each touch pin (one octave lower)
midi_notes = [
    36, 38, 40, 41, 43, 45, 47, 48, 50, 52, 53, 55, 57, 59, 60, 62, 64, 65, 67, 69,
    71, 72, 74, 76, 77, 79
]

# State variables to track if a note has been played for each touch pin
note_played = [False] * len(note_touch_pins)

# State variable to track the current MIDI channel
current_channel = 0

# Function to change the MIDI channel
def change_midi_channel():
    global current_channel
    current_channel = (current_channel + 1) % 5  # Cycle through channels 0 to 4
    midi.out_channel = current_channel
    print(f"MIDI channel changed to {current_channel + 1}")

# Main loop
while True:
    for i, touch_sensor in enumerate(note_touch_sensors):
        # Capacitive touch sensing
        if touch_sensor.value:
            # Check if the note has already been played
            if not note_played[i]:
                # Send MIDI note on message when touch is detected
                midi.send(NoteOn(midi_notes[i], 120))
                note_played[i] = True  # Update state variable
        else:
            # Check if the note has been played and turn it off
            if note_played[i]:
                # Send MIDI note off message when touch is released
                midi.send(NoteOff(midi_notes[i], 120))
                note_played[i] = False  # Update state variable

    # Check for touch on the channel change sensor
    if channel_change_sensor.value:
        change_midi_channel()
        time.sleep(0.5)  # Debounce delay to prevent multiple changes

