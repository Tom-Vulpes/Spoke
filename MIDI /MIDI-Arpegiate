import time
import board
import touchio
import digitalio
import usb_midi
import adafruit_midi
from adafruit_midi.note_on import NoteOn
from adafruit_midi.note_off import NoteOff
import neopixel
from rainbowio import colorwheel

# === CONFIGURABLE PARAMETERS ===
NOTE_DURATION = 0.15      # How long each note is held (in seconds)
ARPEGGIO_SPEED = 0.2      # How fast to step through arpeggio (in seconds)

# MIDI note numbers mapped per sensor index
note_map = [
    36, 38, 40, 43, 45,   # C2 D2 E2 G2 A2
    48, 50, 52, 55, 57,   # C3 D3 E3 G3 A3
    60, 62, 64, 67, 69,   # C4 D4 E4 G4 A4
    72, 74, 76, 79, 81,   # C5 D5 E5 G5 A5
    84, 86, 88, 91, 93,   # C6 D6 E6 G6 A6
    96                    # C7 (if you need one more)
]

# Define the touch pins
touch_pins = [
    board.GP1, board.GP2, board.GP3, board.GP4, board.GP5, board.GP6, board.GP7, board.GP8,
    board.GP9, board.GP10, board.GP11, board.GP12, board.GP13, board.GP14, board.GP15, board.GP16,
    board.GP17, board.GP18, board.GP19, board.GP20, board.GP21, board.GP22, board.GP23, board.GP24,
    board.GP25, board.GP28, board.VOLTAGE_MONITOR
]

# Initialize touch sensors
touch_sensors = []
for pin in touch_pins:
    try:
        touch_sensors.append(touchio.TouchIn(pin))
    except ValueError:
        print(f"No pulldown resistor found on pin {pin}, skipping...")

# MIDI setup
midi = adafruit_midi.MIDI(midi_out=usb_midi.ports[1], out_channel=0)

# State tracking
note_played = [False] * len(touch_pins)

# NeoPixel setup
num_pixels = len(touch_sensors)
pixels = neopixel.NeoPixel(board.GP0, num_pixels, brightness=0.03, auto_write=True)

# Startup animation
def rainbow(speed, duration, step_size=10):
    start_time = time.monotonic()
    while time.monotonic() - start_time < duration:
        for j in range(0, 256, step_size):
            for i in range(num_pixels):
                pixel_index = (i * 256 // num_pixels + j) % 256
                pixels[i] = colorwheel(pixel_index)
            pixels.show()
            if time.monotonic() - start_time >= duration:
                return
            time.sleep(speed)

# Fill all pixels blue
def all_blue():
    pixels.fill((0, 0, 255))
    pixels.show()
    

# Start
rainbow(0.01, 2, step_size=10)
all_blue()
# Melody definitions

# Arpeggio state
arpeggio_notes = []           # Currently held MIDI notes
last_step_time = 0
current_step_index = 0
note_on = None                # Currently playing note
note_on_time = 0

while True:
    now = time.monotonic()
    arpeggio_notes = []

    # Scan touch inputs to see which notes should be in the arpeggio
    for i, touch_sensor in enumerate(touch_sensors):
        if touch_sensor.value:
            arpeggio_notes.append(note_map[i])
            pixels[i] = (255, 0, 255)
        else:
            pixels[i] = (0, 0, 255)

    # If no notes are held, stop everything
    if not arpeggio_notes:
        if note_on is not None:
            midi.send(NoteOff(note_on, 120))
            note_on = None
        current_step_index = 0
        continue

    # Stop previous note after NOTE_DURATION
    if note_on is not None and now - note_on_time >= NOTE_DURATION:
        midi.send(NoteOff(note_on, 120))
        note_on = None

    # Advance arpeggio step every ARPEGGIO_SPEED
    if now - last_step_time >= ARPEGGIO_SPEED:
        last_step_time = now
        if arpeggio_notes:
            current_note = arpeggio_notes[current_step_index % len(arpeggio_notes)]
            midi.send(NoteOn(current_note, 120))
            note_on = current_note
            note_on_time = now
            current_step_index = (current_step_index + 1) % len(arpeggio_notes)

