import time
import board
import touchio
import digitalio
import usb_midi
import adafruit_midi
from adafruit_midi.note_on import NoteOn
from adafruit_midi.note_off import NoteOff
import neopixel
from rainbowio import colorwheel
import adafruit_ssd1327


chord_map = [
    [36, 40, 43],   # C2 major (C-E-G)
    [38, 41, 45],   # D minor
    [40, 43, 47],   # E minor
    [43, 47, 50],   # G major
    [45, 48, 52],   # A minor

    [48, 52, 55],   # C3 major
    [50, 53, 57],   # D minor
    [52, 55, 59],   # E minor
    [55, 59, 62],   # G major
    [57, 60, 64],   # A minor

    [60, 64, 67],   # C4 major
    [62, 65, 69],   # D minor
    [64, 67, 71],   # E minor
    [67, 71, 74],   # G major
    [69, 72, 76],   # A minor

    [72, 76, 79],   # C5 major
    [74, 77, 81],   # D minor
    [76, 79, 83],   # E minor
    [79, 83, 86],   # G major
    [81, 84, 88],   # A minor

    [84, 88, 91],   # C6 major
    [86, 89, 93],   # D minor
    [88, 91, 95],   # E minor
    [91, 95, 98],   # G major
    [93, 96, 100],  # A minor

    [96, 100, 103], # C7 major
    [98, 101, 105]  # D minor
]


# Define the touch pins
touch_pins = [
    board.GP1, board.GP2, board.GP3, board.GP4, board.GP5, board.GP6, board.GP7, board.GP8,
    board.GP9, board.GP10, board.GP11, board.GP12, board.GP13, board.GP14, board.GP15, board.GP16,
    board.GP17, board.GP18, board.GP19, board.GP20, board.GP21, board.GP22, board.GP23, board.GP24,
    board.GP25, board.GP28, board.VOLTAGE_MONITOR
]

# Initialize touch sensors
touch_sensors = []
for pin in touch_pins:
    try:
        touch_sensors.append(touchio.TouchIn(pin))
    except ValueError:
        print(f"No pulldown resistor found on pin {pin}, skipping...")

# MIDI setup
midi = adafruit_midi.MIDI(midi_out=usb_midi.ports[1], out_channel=0)

# State tracking
note_played = [False] * len(touch_pins)

# NeoPixel setup
num_pixels = len(touch_sensors)
pixels = neopixel.NeoPixel(board.GP0, num_pixels, brightness=0.03, auto_write=True)

# Startup animation
def rainbow(speed, duration, step_size=10):
    start_time = time.monotonic()
    while time.monotonic() - start_time < duration:
        for j in range(0, 256, step_size):
            for i in range(num_pixels):
                pixel_index = (i * 256 // num_pixels + j) % 256
                pixels[i] = colorwheel(pixel_index)
            pixels.show()
            if time.monotonic() - start_time >= duration:
                return
            time.sleep(speed)

# Fill all pixels blue
def all_blue():
    pixels.fill((0, 0, 255))
    pixels.show()
    

# Start
rainbow(0.01, 2, step_size=10)
all_blue()
# Melody definitions
note_played = [False] * len(touch_sensors)

while True:
    for i, touch_sensor in enumerate(touch_sensors):
        if touch_sensor.value:
            if not note_played[i]:
                for note in chord_map[i]:
                    midi.send(NoteOn(note, 100))
                note_played[i] = True
                pixels[i] = (0, 255, 0)
        else:
            if note_played[i]:
                for note in chord_map[i]:
                    midi.send(NoteOff(note, 100))
                note_played[i] = False
                pixels[i] = (0, 0, 255)

